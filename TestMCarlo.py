# *=========================================================================
# *
# *  Copyright Erasmus MC Rotterdam and contributors
# *  This software is licensed under the Apache 2 license, quoted below.

# *  Copyright 2019 Erasmus MC Rotterdam.
# *  Copyright 2019 Gokhan Gunay <g.gunay@erasmsumc.nl>

# *  Licensed under the Apache License, Version 2.0 (the "License"); you may not
# *  use this file except in compliance with the License. You may obtain a copy of
# *  the License at
# *  http://www.apache.org/licenses/LICENSE-2.0

# *  Unless required by applicable law or agreed to in writing, software
# *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# *  License for the specific language governing permissions and limitations under
# *  the License.
# *=========================================================================

import sys,time,os
import lib.PceHandler as PCE
import lib.Param as PR
import lib.MatlabExeCompiler as MatlabCompiler
import TestImages as Images

if sys.version_info[0]==3:
    import subprocess
    exeGetOutput=subprocess.getoutput
else:
    import commands
    exeGetOutput=commands.getoutput
    
SelfPath=os.path.dirname(os.path.realpath(__file__))

"""
@brief: It just waits till end of all 
        jobs of the user.
@Note:  Experiments were executed on the BIGR cluster facility and this 
        method is wait function for this cluster. Therefore, for a different
        cluster this method should be revisiteda dn modified.
"""
def waitCluster():
    Qstat=exeGetOutput("qstat ")
    cnt=0
    while Qstat.count("\n")>1:
        Qstat=exeGetOutput("qstat ")
        if not cnt==Qstat.count("\n"):
            cnt=Qstat.count("\n")
            print("Remaining Task ",cnt-1)
        time.sleep(2)  


"""
@brief: This method is a template to show which and how settings dictionaries
        should be assigned.
"""
def setupEnvSimulatedData(inputDict):
    inputDict["RootDir"]=SelfPath
    """Main Directory where all results and registration related files are saved"""
    inputDict["resultsRootDir"]=SelfPath+"/ExpResults/PCE"
    """Directory where results and registration related files are saved."""
    inputDict["registRootDir"]=inputDict["resultsRootDir"]

    """Rigid registration parameter file template."""
    inputDict["rigidParaTemplate"]=inputDict["RootDir"]+"/ParameterFiles/RigidparaPI.txt"
    """Nonrigid registration parameter file template."""
    inputDict["nonRigidParaTemplate"]=inputDict["RootDir"]+"/ParameterFiles/Nonrigidpara2ndStep.txt"
    """Example settings for PCE execution model."""
    inputDict["PceSetInstanceFile"]=inputDict["RootDir"]+"/ParameterFiles/PceParamInstance.json"
    
    """Path of PCE Matlab scripts."""
    inputDict["PCE_ExePath"]=SelfPath+"/MatlabScripts"
    """PCE executable."""
    inputDict["PCE_Exe"]=inputDict["PCE_ExePath"]+"/"+"pceExe"
    """Settings file for PCE execution model."""
    inputDict["PCE_ModelSetRunFile"]=inputDict["PCE_ExePath"]+"/PCE_Settings.json"
    """Elastix executable."""
    inputDict["elastixExe"]="/scratch/ggunay/Tools/elastix/src/bin/elastix"
    """Transformix executable."""
    inputDict["transformixExe"]="/scratch/ggunay/Tools/elastix/src/bin/transformix"
    """Weights file keeping parameter values where registrations will be executed.
       It is generated by Matlab script based executable.
    """
    inputDict["Pce_WeightFile"]=inputDict["registRootDir"]+"/PceWeights.txt"

def runSimulated():
    
    """
    @brief: This part is dedicated for compilation of Matlab code to an executable.
        This step is a prerequisite in order for the method to run.
    """
    compiler=MatlabCompiler()
    compiler["preCommands"]="module load matlab & module load mcr &"
    compiler["postCommands"]=""
    compiler.compileMatlabExe()
    
    
    """
    @brief: After compilation of Matlab scripts, initialization of the PCE module is done.
        "prePceCommands" and "postPceCommands" dictionary keys assign commands to be run 
        before and after the compiled Matlab scripts' executable. They are used 
        to prepare the executable for executation (such as loading some modules from acluster)
        and clean up after the execution.
    """
    pce=PCE()
    pce["prePceCommands"]="module load matlab & module load mcr &"
    pce["postPceCommands"]=""
    setupEnvSimulatedData(pce)
    pce.isVerbose(True)
    
    
    """"[ParamName,ParamDist,Param,ParamMean,ParamStd]"""
    """Creation of the parameters to be analyzed"""
    par1=PR("Metric1Weight","gauss",4.12,2.65)
    par2=PR("FinalGridSpacingInPhysicalUnits","gauss",4.37,0.55)

    """Mapping and addition of the parameters to the PCE module"""
    par1.setValMapFunct(lambda a:pow(2,a)) 
    pce.addParam(par1)
    par2.setValMapFunct(lambda a:pow(2,a))
    pce.addParam(par2)
        
    """Some PCE settings"""
    pce.setQuadratureType("gauss")
    pce.setGridType("sparse")
    pce.setTrim("1")
    pce.setRemoveSmallElements("1")
    pce.setSmallElementThresh("1e-13")    
    
    """Setting cluster command to run elastix on multiple nodes."""
    pce.elastixSetClusterCommand("bigrsub -R 1.5G -q day ")
    """Addition of cluster wait method to the PCE module."""
    pce.setClusterWaitFunc(waitCluster)
    
    """
    Format: {"Image Name in the dataset table":{"name":Real image name,"file":Image file name with full path}}
        Image file name =Images["Image Name in the dataset table"]["file"]
    """
    fixedImages=Images.getFixedImages()
    movingImages=Images.getMovingImages()
    
    pcePolynomialOrder=3
    pceGridLevel=3
    pce.setPolOrder(pcePolynomialOrder)
    pce.setGridLevel(pceGridLevel)
    
    for ind in movingImages:
        """Settings for fixed and moving images"""
        pce["fixedIm"]=fixedImages["Image0"]["file"]
        pce["movingIm"]=movingImages[ind]["file"]  
        
        """Settings for location of registrations and results"""      
        pce["RegMainDir"]=pce["registRootDir"]+"/"+movingImages[ind]["name"]+"/""Gl"+str(pceGridLevel)+"Po"+str(pcePolynomialOrder)
        pce.run(False,True)

runSimulated()
